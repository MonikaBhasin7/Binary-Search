/*https://leetcode.com/problems/search-in-rotated-sorted-array/


Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1*/



class Solution {
public:
    int search(vector<int>a,int start,int end, int target)
    {
      while(start<=end)
      {
         int mid=(start+end)/2;
          if(a[mid]==target)
          {
            return mid;
          }
          else if(target<a[mid])
          {
            end=mid-1;
          }
          else
          {
            start=mid+1;
          }
      }
    
      return -1;
    }
    int find_pivot(vector<int>a)
    {
      int i,j;
      int start=0;
      int end=a.size()-1;
      int n=a.size();
      while(start<=end)
      {
        if(a[start]<a[end])
        {
            return start;
        }
        int mid=(start+end)/2;
        int prev=(mid+n-1)%n;
        int next=(mid+1)%n;
        if(a[mid]<=a[prev] && a[mid]<=a[next])
        {
          return mid;
        }
        
        else if(a[start]<=a[mid])
        {
          start=mid+1;
        }
        else if(a[mid]<=a[end])
        {
          end=mid-1;
        }
      } 
      return -1;
    }
    int search(vector<int>& a, int target) {
      int i,j;
      int n=a.size();
      
      if (n == 0)
      return -1;
      if (n == 1)
      return a[0] == target ? 0 : -1;
      if(a.size()==0)
      {
        return -1;
      }
      
      //check the array is sorted
      if(a[0]<a[n-1])
      {
        return search(a,0,n-1,target);
      }
        
      int pivot=find_pivot(a);
      
      if(target==a[pivot])
      {
        return pivot;
      }
     
      int k=search(a,pivot,a.size()-1,target);
      if(k!=-1)
      {
        return k;
      }
      else
      {
        return search(a,0, pivot-1,target);
      } 
    }
};
