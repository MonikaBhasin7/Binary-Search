/*https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/


Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
nums is a non decreasing array.
-10^9 <= target <= 10^9*/




class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
      int i,j;
      
      //find first occurrence
      int start=0;
      int end=nums.size()-1;
      int first=-1;
      int second=-1;
      vector<int>out;
      while(start<=end)
      {
        int mid=(start+end)/2;
        if(nums[mid]==target)
        {
          first=mid;
          end=mid-1;
        }
        else if(nums[mid]<target)
        {
          start=mid+1;
        }
        else
        {
          end=mid-1;
        }
      }
      
      out.push_back(first);
      
      start=0;
      end=nums.size()-1;
       while(start<=end)
      {
        int mid=(start+end)/2;
        if(nums[mid]==target)
        {
          second=mid;
          start=mid+1;
        }
        else if(nums[mid]<target)
        {
          start=mid+1;
        }
        else
        {
          end=mid-1;
        }
      }
      out.push_back(second);
      return out;
        
    }
};
